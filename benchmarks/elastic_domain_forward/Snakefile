
include: "rules/variables.smk"
include: "rules/compile.smk"
include: "rules/generate_mesh.smk"
include: "rules/run_simulation.smk"

## define function to return list of work directories
def work_directories(nxmax_values, nzmax_values, repeat_values):
    for (nxmax, nzmax) in zip(nxmax_values, nzmax_values):
        for repeat in range(repeat_values):
            yield os.path.join(work_directory.format(nxmax=nxmax, nzmax=nzmax, repeat=repeat), "profile.csv")


rule all:
    input:
        "average_results.png"

    localrule:
        True

rule generate_profile:
    input:
        log = os.path.join(work_directory, "output.log")
    output:
        profile = os.path.join(work_directory, "profile.csv")

    localrule:
        True

    shell:
        '''
            SOLVER_TIME=$(grep "Total solver time" {input.log} | awk '{{print $7}}') && \
            HOSTNAME=$(grep "Hostname" {input.log} | awk '{{print $2}}') && \
            echo "{wildcards.nxmax},{wildcards.nzmax},{wildcards.repeat},$SOLVER_TIME,$HOSTNAME" > {output.profile}
        '''

rule compile_results:
    input:
    ## use work_directories function to get list of work directories
        profile_files = work_directories([80, 160, 320, 640, 1280], [60, 120, 240, 480, 960], 5)
    output:
        "results.csv"
    localrule:
        True

    shell:
        '''
            echo "nxmax,nzmax,repeat,solver_time,hostname" > {output} && \
            for file in {input.profile_files}; do \
                cat $file >> {output}; \
            done
        '''

rule average_results:
    input:
        profiles = "results.csv"
    output:
        results = "average_results.csv"
    localrule:
        True
    run:
        import pandas as pd
        ## Load csv file into pandas dataframe
        df = pd.read_csv(input.profiles)
        ## Group by nxmax and nzmax
        df_grouped = df.groupby(['nxmax', 'nzmax'])
        ## Calculate mean and standard deviation of solver_time
        df_mean = df_grouped['solver_time'].mean().reset_index()
        df_std = df_grouped['solver_time'].std().reset_index()

        ## create a new dataframe with nxmax, nzmax, solver_time, std_dev
        df_final = pd.DataFrame(columns=['nxmax', 'nzmax', 'solver_time', 'std_dev'])
        for index, row in df_mean.iterrows():
            nxmax = row['nxmax']
            nzmax = row['nzmax']
            solver_time = row['solver_time']
            std_dev = df_std[(df_std['nxmax'] == nxmax) & (df_std['nzmax'] == nzmax)]['solver_time'].values[0]
            df_final = pd.concat([df_final,
                                  pd.DataFrame([[nxmax, nzmax, solver_time, std_dev]],
                                  columns=['nxmax', 'nzmax', 'solver_time', 'std_dev'])])

        ## Save the final dataframe to a csv file
        df_final.to_csv(output.results, index=False)

rule plot_results:
    input:
        results = "average_results.csv",
    output:
        "average_results.png"
    run:
        import pandas as pd
        import matplotlib.pyplot as plt

        ## Load csv files into pandas dataframes
        df_results = pd.read_csv(input.results)

        ## Create a new dataframe with nxmax, nzmax, solver_time, std_dev
        df_merged = pd.DataFrame(columns=['nxmax', 'nzmax', 'solver_time_results', 'std_dev'])
        for index, row in df_results.iterrows():
            nxmax = row['nxmax']
            nzmax = row['nzmax']
            solver_time = row['solver_time']
            std_dev = row['std_dev']
            df_merged = pd.concat([df_merged,
                                  pd.DataFrame([[nxmax, nzmax, solver_time, std_dev]],
                                  columns=['nxmax', 'nzmax', 'solver_time_results', 'std_dev'])])

        ## Plot the results
        ## Xaxis is nxmax * nzmax and Yaxis is solver_time

        plt.figure(figsize=(10, 6))
        plt.errorbar(df_merged['nxmax'] * df_merged['nzmax'],
                     df_merged['solver_time_results'],
                     yerr=df_merged['std_dev'],
                     linestyle='None',
                     marker='o',
                     color = "black",
                     label='Current Implementation')

        plt.xlabel('Total number of spectral elements')
        plt.ylabel('Solver Time (s)')
        plt.title('Performance CPU implementation')

        plt.legend()
        plt.xscale('log')
        plt.yscale('log')
        plt.savefig(output[0])


rule clean:
    localrule:
        True
    shell:
        '''
            rm -rf workdir_*
            rm -rf build_*
            rm -f results.csv
            rm -f average_results.csv
            rm -f average_results.png
        '''
