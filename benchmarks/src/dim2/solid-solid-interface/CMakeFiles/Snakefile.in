SPECFEM_BIN = "@CMAKE_BINARY_DIR@/bin/specfem2d"
MESHFEM_BIN = "@CMAKE_BINARY_DIR@/bin/xmeshfem2D"

rule all:
    input:
        plot_psv="OUTPUT_FILES/results_psv/plot.png",
        plot_sh="OUTPUT_FILES/results_sh/plot.png",
    localrule: True


rule generate_mesh:
    input:
        "Par_File",
    output:
        database="OUTPUT_FILES/database.bin",
        stations="OUTPUT_FILES/STATIONS",
    localrule: True
    shell:
        """
            mkdir -p OUTPUT_FILES
            {MESHFEM_BIN} -p {input}
        """


rule run_solver_psv:
    input:
        database="OUTPUT_FILES/database.bin",
        stations="OUTPUT_FILES/STATIONS",
        source="source.yaml",
        config="specfem_config_psv.yaml",
    output:
        seismograms=expand(
            "OUTPUT_FILES/results_psv/{network_name}.{station_name}.S2.{component}.semd",
            station_name=[
                "S0001",
            ],
            network_name=["AA"],
            component=["BXX", "BXZ"],
        ),
    resources:
        nodes=1,
        tasks=1,
        cpus_per_task=1,
        runtime=10,
    shell:
        """
            # module purge
            # module load boost/1.73.0
            mkdir -p OUTPUT_FILES/results_psv
            echo "Hostname: $(hostname)" > output.log
            {SPECFEM_BIN} -p {input.config} >> output.log
        """


rule plot_seismogram_psv:
    input:
        trace_files=expand(
            "OUTPUT_FILES/results_psv/{network_name}.{station_name}.S2.{component}.semd",
            station_name=[
                "S0001",
            ],
            network_name=["AA"],
            component=["BXX", "BXZ"],
        ),
    output:
        traces="OUTPUT_FILES/results_psv/plot.png",
    localrule: True
    run:
        import glob
        import os
        import numpy as np
        import obspy

        # Set matplotlib gui off
        import matplotlib
        matplotlib.use("Agg")

        def get_traces(directory):
            traces = []
            files = glob.glob(directory + "/*.sem*")

            # iterate over all seismograms

            for filename in files:
                station_name = os.path.splitext(filename)[0]
                network, station, location, channel = station_name.split("/")[-1].split(".")
                trace = np.loadtxt(filename, delimiter=" ")
                starttime = trace[0, 0]
                dt = trace[1, 0] - trace[0, 0]
                traces.append(
                    obspy.Trace(
                        trace[:, 1],
                        dict(network=network,
                            station=station,
                            location=location,
                            channel=channel,
                            starttime=starttime,
                            delta=dt)
                    )
                )

            stream = obspy.Stream(traces)

            return stream

        # Get traces from the specified directory
        directory_name = "OUTPUT_FILES/results_psv"
        stream = get_traces(directory_name)

        stream.plot(size=(1000, 600)).savefig(output.traces)



rule run_solver_sh:
    input:
        database="OUTPUT_FILES/database.bin",
        stations="OUTPUT_FILES/STATIONS",
        source="source.yaml",
        config="specfem_config_sh.yaml",
    output:
        seismograms=expand(
            "OUTPUT_FILES/results_sh/{network_name}.{station_name}.S2.{component}.semd",
            station_name=[
                "S0001",
            ],
            network_name=["AA"],
            component=["BXY"],
        ),
    resources:
        nodes=1,
        tasks=1,
        cpus_per_task=1,
        runtime=10,
    shell:
        """
            # module purge
            # module load boost/1.73.0
            mkdir -p OUTPUT_FILES/results_sh
            echo "Hostname: $(hostname)" > output.log
            {SPECFEM_BIN} -p {input.config} >> output.log
        """

rule plot_seismogram_sh:
    input:
        trace_files=expand(
            "OUTPUT_FILES/results_sh/{network_name}.{station_name}.S2.{component}.semd",
            station_name=[
                "S0001",
            ],
            network_name=["AA"],
            component=["BXY"],
        ),
    output:
        traces="OUTPUT_FILES/results_sh/plot.png",
    localrule: True
    run:
        import glob
        import os
        import numpy as np
        import obspy

        # Set matplotlib gui off
        import matplotlib
        matplotlib.use("Agg")


        def get_traces(directory):
            traces = []
            files = glob.glob(directory + "/*.sem*")
            # iterate over all seismograms
            for filename in files:
                station_name = os.path.splitext(filename)[0]
                network, station, location, channel = station_name.split("/")[-1].split(".")
                trace = np.loadtxt(filename, delimiter=" ")
                starttime = trace[0, 0]
                dt = trace[1, 0] - trace[0, 0]
                traces.append(
                    obspy.Trace(
                        trace[:, 1],
                        dict(network=network,
                            station=station,
                            location=location,
                            channel=channel,
                            starttime=starttime,
                            delta=dt)
                    )
                )

            stream = obspy.Stream(traces)

            return stream

        directory_name = "OUTPUT_FILES/results_sh"
        stream = get_traces(directory_name)
        stream.plot(size=(1000, 400)).savefig(output.traces)





rule clean:
    shell:
        """
            rm -rf OUTPUT_FILES
        """
