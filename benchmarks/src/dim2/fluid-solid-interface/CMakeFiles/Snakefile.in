SPECFEM_BIN = "@CMAKE_BINARY_DIR@/bin/specfem2d"
MESHFEM_BIN = "@CMAKE_BINARY_DIR@/bin/xmeshfem2D"


rule all:
    input:
        plotX="@CURRENT_BENCHMARK_BUILD_DIR@/OUTPUT_FILES/results/traces_X.png",
        plotZ="@CURRENT_BENCHMARK_BUILD_DIR@/OUTPUT_FILES/results/traces_Z.png",
    localrule: True


rule generate_mesh:
    input:
        "@CURRENT_BENCHMARK_BUILD_DIR@/Par_File",
    output:
        database="@CURRENT_BENCHMARK_BUILD_DIR@/OUTPUT_FILES/database.bin",
        stations="@CURRENT_BENCHMARK_BUILD_DIR@/OUTPUT_FILES/STATIONS",
    localrule: True
    shell:
        """
            mkdir -p @CURRENT_BENCHMARK_BUILD_DIR@/OUTPUT_FILES
            {MESHFEM_BIN} -p {input}
        """


rule run_solver:
    input:
        database="@CURRENT_BENCHMARK_BUILD_DIR@/OUTPUT_FILES/database.bin",
        stations="@CURRENT_BENCHMARK_BUILD_DIR@/OUTPUT_FILES/STATIONS",
        source="@CURRENT_BENCHMARK_BUILD_DIR@/sources.yaml",
        config="@CURRENT_BENCHMARK_BUILD_DIR@/specfem_config.yaml",
    output:
        seismograms=expand(
            "@CURRENT_BENCHMARK_BUILD_DIR@/OUTPUT_FILES/results/{network_name}.{station_name}.S2.{component}.semd",
            station_name=[
                "S0001",
                "S0002",
                "S0003",
                "S0004",
                "S0005",
                "S0006",
                "S0007",
                "S0008",
                "S0009",
                "S0010",
                "S0011",
            ],
            network_name=["AA"],
            component=["BXX", "BXZ"],
        ),
        log="@CURRENT_BENCHMARK_BUILD_DIR@/output.log",
    resources:
        nodes=1,
        tasks=1,
        cpus_per_task=1,
        runtime=10,
    shell:
        """
            # module purge
            # module load boost/1.73.0
            export KOKKOS_TOOLS_LIBS={params.KOKKOS_TOOLS_LIBS}
            mkdir -p @CURRENT_BENCHMARK_BUILD_DIR@/OUTPUT_FILES/results
            echo "Hostname: $(hostname)" > {output.log}
            {SPECFEM_BIN} -p {input.config} >> {output.log}
        """


rule plot_seismogram:
    input:
        trace_files=expand(
            "@CURRENT_BENCHMARK_BUILD_DIR@/OUTPUT_FILES/results/{network_name}.{station_name}.S2.{component}.semd",
            station_name=[
                "S0001",
                "S0002",
                "S0003",
                "S0004",
                "S0005",
                "S0006",
                "S0007",
                "S0008",
                "S0009",
                "S0010",
                "S0011",
            ],
            network_name=["AA"],
            component=["BXX", "BXZ"],
        ),
    output:
        traces_X="@CURRENT_BENCHMARK_BUILD_DIR@/OUTPUT_FILES/results/traces_X.png",
        traces_Z="@CURRENT_BENCHMARK_BUILD_DIR@/OUTPUT_FILES/results/traces_Z.png",
    localrule: True
    run:
        import glob
        import os
        import numpy as np
        import obspy

        # Set matplotlib gui off
        import matplotlib
        matplotlib.use("Agg")


        def get_traces(directory):
            traces = []
            files = glob.glob(directory + "/*.sem*")
            ## iterate over all seismograms
            for filename in files:
                station_name = os.path.splitext(filename)[0]
                network, station, location, channel = station_name.split("/")[-1].split(".")
                trace = np.loadtxt(filename, delimiter=" ")
                starttime = trace[0, 0]
                dt = trace[1, 0] - trace[0, 0]
                traces.append(
                    obspy.Trace(
                        trace[:, 1],
                        {"network": network,
                         "station": station,
                         "location": location,
                         "channel": channel,
                         "starttime": starttime, "delta": dt},
                    )
                )

            stream = obspy.Stream(traces)

            return stream


        stream = get_traces("@CURRENT_BENCHMARK_BUILD_DIR@/OUTPUT_FILES/results")

        stream.select(component='X').plot(size=(800, 1000)).savefig(output.traces_X)
        stream.select(component='Z').plot(size=(800, 1000)).savefig(output.traces_Z)


rule clean:
    shell:
        """
            rm -rf @CURRENT_BENCHMARK_BUILD_DIR@/OUTPUT_FILES
        """
