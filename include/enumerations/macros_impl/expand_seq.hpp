// clang-format off

/**
 * @brief Call a macro for each element in the sequence.
 *  Built-in macros like BOOST_PP_SEQ_FOR_EACH cannot be used here because they cannot
 *  correctly expand angle brackets with comma, like property<elastic, isotropic>.
 * @param MACRO The macro to be called
 * @param data data to be passed to the macro
 * @param seq sequence to be expanded
 * @param n size of the sequence
 */
#define _EXPAND_SEQ_N(MACRO, data, seq, n)                                           \
  BOOST_PP_IF(BOOST_PP_LESS(0, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(0, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(1, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(1, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(2, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(2, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(3, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(3, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(4, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(4, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(5, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(5, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(6, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(6, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(7, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(7, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(8, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(8, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(9, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(9, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(10, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(10, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(11, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(11, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(12, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(12, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(13, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(13, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(14, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(14, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(15, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(15, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(16, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(16, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(17, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(17, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(18, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(18, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(19, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(19, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(20, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(20, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(21, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(21, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(22, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(22, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(23, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(23, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(24, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(24, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(25, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(25, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(26, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(26, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(27, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(27, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(28, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(28, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(29, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(29, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(30, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(30, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(31, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(31, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(32, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(32, seq))

#define _EXPAND_SEQ(MACRO, data, seq) _EXPAND_SEQ_N(MACRO, data, seq, BOOST_PP_SEQ_SIZE(seq))

/**
 * @brief Same as _EXPAND_SEQ, but defined separately to enable nested macro call from _EXPAND_SEQ.
 */
#define _EXPAND_SEQ2_N(MACRO, data, seq, n)                                           \
  BOOST_PP_IF(BOOST_PP_LESS(0, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(0, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(1, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(1, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(2, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(2, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(3, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(3, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(4, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(4, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(5, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(5, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(6, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(6, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(7, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(7, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(8, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(8, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(9, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(9, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(10, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(10, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(11, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(11, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(12, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(12, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(13, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(13, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(14, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(14, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(15, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(15, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(16, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(16, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(17, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(17, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(18, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(18, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(19, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(19, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(20, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(20, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(21, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(21, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(22, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(22, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(23, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(23, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(24, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(24, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(25, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(25, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(26, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(26, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(27, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(27, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(28, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(28, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(29, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(29, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(30, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(30, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(31, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(31, seq))  \
  BOOST_PP_IF(BOOST_PP_LESS(32, n), MACRO, _EMPTY_MACRO)(data, BOOST_PP_SEQ_ELEM(32, seq))

#define _EXPAND_SEQ2(MACRO, data, seq) _EXPAND_SEQ2_N(MACRO, data, seq, BOOST_PP_SEQ_SIZE(seq))
