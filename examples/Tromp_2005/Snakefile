SPECFEM_BIN = "specfem2d"
MESHFEM_BIN = "xmeshfem2D"
ADJ_SEISMOGRAM_BIN = "xadj_seismogram"


rule all:
    input:
        kernels="OUTPUT_FILES/Kernels.png",


rule generate_mesh:
    input:
        "Par_File",
    output:
        database="OUTPUT_FILES/database.bin",
        stations="OUTPUT_FILES/STATIONS",
    localrule: True
    shell:
        """
            mkdir -p OUTPUT_FILES
            {MESHFEM_BIN} -p {input}
        """


rule forward_simulation:
    input:
        database="OUTPUT_FILES/database.bin",
        stations="OUTPUT_FILES/STATIONS",
        source="forward_source.yaml",
        config="forward_config.yaml",
    output:
        seismograms=expand(
            "OUTPUT_FILES/results/{network_name}.{station_name}.S2.{component}.semd",
            station_name=["S0001"],
            network_name=["AA"],
            component=["BXX", "BXZ"],
        ),
        forward_wavefield="OUTPUT_FILES/ForwardWavefield002004.h5",
    resources:
        nodes=1,
        tasks=1,
        cpus_per_task=1,
        runtime=10,
    shell:
        """
            # module purge
            # module load boost/1.73.0
            mkdir -p OUTPUT_FILES/results
            echo "Hostname: $(hostname)" > output.log
            {SPECFEM_BIN} -p {input.config} >> output.log
        """


rule compute_adjoint_sources:
    input:
        seismograms=expand(
            "OUTPUT_FILES/results/{network_name}.{station_name}.S2.{component}.semd",
            station_name=["S0001"],
            network_name=["AA"],
            component=["BXX", "BXZ"],
        ),
    output:
        adjoint_sources=expand(
            "adjoint_sources/{network_name}.{station_name}.S2.{component}.adj",
            station_name=["S0001"],
            network_name=["AA"],
            component=["BXX", "BXZ"],
        ),
    shell:
        """
            mkdir -p adjoint_sources
            echo "Hostname: $(hostname)" > output.log
            {ADJ_SEISMOGRAM_BIN} 27.0 32.0 AA.S0001.S2 OUTPUT_FILES/results/ adjoint_sources/ 1
        """


rule adjoint_simulation:
    input:
        database="OUTPUT_FILES/database.bin",
        stations="OUTPUT_FILES/STATIONS",
        source="adjoint_source.yaml",
        config="adjoint_config.yaml",
        adjoint_sources=expand(
            "adjoint_sources/{network_name}.{station_name}.S2.{component}.adj",
            station_name=["S0001"],
            network_name=["AA"],
            component=["BXX", "BXZ"],
        ),
    output:
        kernels=directory("OUTPUT_FILES/Kernels"),
    resources:
        nodes=1,
        tasks=1,
        cpus_per_task=1,
        runtime=10,
    shell:
        """
            # module purge
            # module load boost/1.73.0
            mkdir -p OUTPUT_FILES/results
            echo "Hostname: $(hostname)" > output.log
            {SPECFEM_BIN} -p {input.config} >> output.log
        """


rule plot_kernels:
    input:
        kernels="OUTPUT_FILES/Kernels",
        plot_script="plot.py",
    output:
        plot="OUTPUT_FILES/Kernels.png",
    run:
        from plot import plot_kernels

        # Set matplotlib gui off
        import matplotlib
        matplotlib.use("Agg")

        plot_kernels(input.kernels, output.plot)


rule clean:
    shell:
        """
            rm -rf OUTPUT_FILES adjoint_sources
        """
