
rule all:
    input:
        kernels = "OUTPUT_FILES/Kernels.h5"

rule generate_mesh:
    input: "Par_File"
    output:
        database = "OUTPUT_FILES/database.bin",
        stations = "OUTPUT_FILES/STATIONS"
    localrule: True
    shell:
        '''
            mkdir -p OUTPUT_FILES
            ./../../build/xmeshfem2D -p {input}
        '''

rule forward_configuration:
    input:
        config = "templates/specfem_config.yaml",
        sources = "templates/source.yaml"

    output:
        config = "forward_config.yaml",
        sources = "forward_source.yaml"

    run:
        import yaml

        ## Create a forward YAML node
        forward = {
            "simulation-mode": {
                "forward": {
                    "writer": {
                        "wavefield": {
                            "format": "HDF5",
                            "directory": "@CMAKE_SOURCE_DIR@/examples/Tromp_2005/OUTPUT_FILES"
                        },
                        "seismogram": {
                            "format": "ASCII",
                            "directory": "@CMAKE_SOURCE_DIR@/examples/Tromp_2005/OUTPUT_FILES/results"
                        }
                    }
                }
            }
        }

        with open(input.config, "r") as f:
            config = yaml.safe_load(f)

        ## Add forward node to the simulation setup
        config["parameters"]["simulation-setup"].update(forward)
        config["parameters"]["databases"]["source-file"] = "@CMAKE_SOURCE_DIR@/examples/Tromp_2005/forward_source.yaml"

        with open(output.config, "w") as f:
            yaml.safe_dump(config, f)

        with open(input.sources, "r") as f:
            sources = yaml.safe_load(f)

        ## Do not change sources for forward simulation
        with open(output.sources, "w") as f:
            yaml.safe_dump(sources, f)

rule forward_simulation:
    input:
        database = "OUTPUT_FILES/database.bin",
        stations = "OUTPUT_FILES/STATIONS",
        source = "forward_source.yaml",
        config = "forward_config.yaml"

    output:
        siesmograms = expand("OUTPUT_FILES/results/{station_name}{network_name}{component}.semd",
            station_name=["S0001"],
            network_name=["AA"],
            component=["BXX", "BXZ"]),

        forward_wavefield = "OUTPUT_FILES/ForwardWavefield.h5"

    resources:
        nodes=1,
        tasks=1,
        cpus_per_task=1,
        runtime=10

    shell:
        '''
            module purge
            module load boost/1.73.0
            mkdir -p OUTPUT_FILES/results
            echo "Hostname: $(hostname)" > output.log
            ./../../build/specfem2d -p {input.config} >> output.log
        '''

rule compute_adjoint_sources:
    input:
        seismograms = expand("OUTPUT_FILES/results/{station_name}{network_name}{component}.semd",
            station_name=["S0001"],
            network_name=["AA"],
            component=["BXX", "BXZ"])

    output:
        adjoint_sources = expand("adjoint_sources/{station_name}{network_name}.{component}.adj",
            station_name=["S0001"],
            network_name=["AA"],
            component=["BXX", "BXZ"])

    shell:
        '''
            mkdir -p adjoint_sources
            echo "Hostname: $(hostname)" > output.log
            ./../../build/xadj_seismogram 27.0 32.0 S0001AA OUTPUT_FILES/results/ adjoint_sources/ 1
        '''

rule adjoint_configuration:
    input:
        config = "templates/specfem_config.yaml",
        sources = "templates/source.yaml"

    output:
        config = "adjoint_config.yaml",
        sources = "adjoint_source.yaml"

    run:
        import yaml

        ## Create a adjoint YAML node
        adjoint = {
            "simulation-mode": {
                "combined": {
                    "writer": {
                        "kernels": {
                            "format": "HDF5",
                            "directory": "@CMAKE_SOURCE_DIR@/examples/Tromp_2005/OUTPUT_FILES"
                        }
                    },
                    "reader": {
                        "wavefield": {
                            "format": "HDF5",
                            "directory": "@CMAKE_SOURCE_DIR@/examples/Tromp_2005/OUTPUT_FILES"
                        }
                    }
                }
            }
        }

        with open(input.config, "r") as f:
            config = yaml.safe_load(f)

        ## Add adjoint node to the simulation setup
        config["parameters"]["simulation-setup"].update(adjoint)
        config["parameters"]["databases"]["source-file"] = "@CMAKE_SOURCE_DIR@/examples/Tromp_2005/adjoint_source.yaml"

        with open(output.config, "w") as f:
            yaml.safe_dump(config, f)

        adjoint_source = {
            "adjoint-source": {
                "station-name": "AA",
                "network-name": "S0001",
                "x": 150000,
                "y": 40000,
                "source-surf": False,
                "angle": 0.0,
                "vx": 0.0,
                "vz": 0.0,
                "External": {
                    "format": "ASCII",
                    "stf": {
                        "X-component": "adjoint_sources/S0001AA.BXX.adj",
                        "Z-component": "adjoint_sources/S0001AA.BXZ.adj"
                    }
                }
            }
        }

        with open(input.sources, "r") as f:
            sources = yaml.safe_load(f)

        sources["number-of-sources"] = 2
        sources["sources"].append(adjoint_source)

        with open(output.sources, "w") as f:
            yaml.safe_dump(sources, f)

rule adjoint_simulation:
    input:
        database = "OUTPUT_FILES/database.bin",
        stations = "OUTPUT_FILES/STATIONS",
        source = "adjoint_source.yaml",
        config = "adjoint_config.yaml",
        adjoint_sources = expand("adjoint_sources/{station_name}{network_name}.{component}.adj",
            station_name=["S0001"],
            network_name=["AA"],
            component=["BXX", "BXZ"])

    output:
        kernels = "OUTPUT_FILES/Kernels.h5"

    resources:
        nodes=1,
        tasks=1,
        cpus_per_task=1,
        runtime=10

    shell:
        '''
            module purge
            module load boost/1.73.0
            mkdir -p OUTPUT_FILES/results
            echo "Hostname: $(hostname)" > output.log
            ./../../build/specfem2d -p {input.config} >> output.log
        '''

rule plot_kernels:
    input:
        kernels = "OUTPUT_FILES/Kernels",
        plot_script = "plot.py"
    output:
        plot = "OUTPUT_FILES/Kernels.png"
    run:
        from plot import plot_kernels

        plot_kernels(input.kernels, output.plot)

rule clean:
    shell:
        '''
            rm -rf OUTPUT_FILES adjoint_sources
            rm -f forward_config.yaml forward_source.yaml adjoint_config.yaml adjoint_source.yaml
        '''
