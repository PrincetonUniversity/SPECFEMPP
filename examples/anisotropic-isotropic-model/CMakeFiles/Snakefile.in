SPECFEM_BIN = "specfem2d"
MESHFEM_BIN = "xmeshfem2D"


rule all:
    input:
        plot="OUTPUT_FILES/results/plot.png",
    localrule: True


rule generate_mesh:
    input:
        "Par_File",
    output:
        database="@CMAKE_SOURCE_DIR@/examples/anisotropic-isotropic-model/OUTPUT_FILES/database.bin",
        stations="@CMAKE_SOURCE_DIR@/examples/anisotropic-isotropic-model/OUTPUT_FILES/STATIONS",
    localrule: True
    shell:
        """
            mkdir -p OUTPUT_FILES
            {MESHFEM_BIN} -p {input}
        """


rule run_solver:
    input:
        database="@CMAKE_SOURCE_DIR@/examples/anisotropic-isotropic-model/OUTPUT_FILES/database.bin",
        stations="@CMAKE_SOURCE_DIR@/examples/anisotropic-isotropic-model/OUTPUT_FILES/STATIONS",
        source="sources.yaml",
        config="specfem_config.yaml",
    output:
        seismograms=expand(
            "OUTPUT_FILES/results/{station_name}{network_name}{component}.semd",
            station_name=[
                "S0001",
            ],
            network_name=["AA"],
            component=["BXX", "BXZ"],
        ),
    resources:
        nodes=1,
        tasks=1,
        cpus_per_task=1,
        runtime=10,
    shell:
        """
            # module purge
            # module load boost/1.73.0
            mkdir -p OUTPUT_FILES/results
            echo "Hostname: $(hostname)" > output.log
            {SPECFEM_BIN} -p {input.config} >> output.log
        """


rule plot_seismogram:
    input:
        trace_files=expand(
            "OUTPUT_FILES/results/{station_name}{network_name}{component}.semd",
            station_name=[
                "S0001",
            ],
            network_name=["AA"],
            component=["BXX", "BXZ"],
        ),
    output:
        traces="OUTPUT_FILES/results/plot.png",
    localrule: True
    run:
        import glob
        import os
        import numpy as np
        import obspy
        import matplotlib
        import matplotlib.pyplot as plt
        matplotlib.use("agg")

        def get_traces(directory):
            traces = []
            files = glob.glob(directory + "/*.sem*")
            ## iterate over all seismograms
            for filename in files:
                station_id = os.path.splitext(filename)[0]
                station_id = station_id.split("/")[-1]
                network = station_id[5:7]
                station = station_id[0:5]
                location = "00"
                component = station_id[7:10]
                trace = np.loadtxt(filename, delimiter=" ")
                starttime = trace[0, 0]
                dt = trace[1, 0] - trace[0, 0]
                traces.append(
                    obspy.Trace(
                        trace[:, 1],
                        {"network": network,
                         "station": station,
                         "location": location,
                         "channel": component,
                         "component": component[-1],
                         "starttime": starttime, "delta": dt},
                    )
                )

            stream = obspy.Stream(traces)

            return stream

        def get_ref_traces(directory):
            traces = []
            files = glob.glob(directory + "/*.sem*")
            ## iterate over all seismograms
            for filename in files:
                station_id = os.path.splitext(filename)[0]
                station_id = station_id.split("/")[-1]
                network, station, component = station_id.split(".")
                location = "00"
                trace = np.loadtxt(filename)
                starttime = trace[0, 0]
                dt = trace[1, 0] - trace[0, 0]
                traces.append(
                    obspy.Trace(
                        trace[:, 1],
                        {"network": network,
                         "station": station,
                         "location": location,
                         "channel": component,
                         "component": component[-1],
                         "starttime": starttime,
                         "delta": dt},
                    )
                )

            stream = obspy.Stream(traces)

            return stream

        stream = get_traces("OUTPUT_FILES/results")
        refstream = get_ref_traces("REF_SEIS")

        print(stream)
        print(refstream)

        N_traces = len(stream)
        Amax = np.max(refstream.max())
        plt.figure(figsize=(8, 4))

        ticklabels = []
        for i, rtr in enumerate(refstream):
            if i == 0:
              rlabel = "Reference"
              label = "Simulated"
            else:
              rlabel = None
              label = None

            ticklabels.append(f"{rtr.stats.component}")

            plt.plot(rtr.times('matplotlib'), rtr.data/Amax + i, 'k-',
                     label=rlabel)

            tr = stream.select(network=rtr.stats.network,
                               station=rtr.stats.station,
                               component=rtr.stats.component)[0]

            plt.plot(tr.times('matplotlib'), tr.data/Amax + i, 'r--',
                     label=label)

        ax = plt.gca()
        ax.set_yticks(np.arange(N_traces))
        ax.set_yticklabels(ticklabels)
        ax.set_title(f"{rtr.stats.network}.{rtr.stats.station}\nBROKEN -- ATTENUTATION STILL MISSING")
        ax.set_xlabel("Time [s]")
        ax.set_ylabel("Normalized amplitude")
        plt.legend(frameon=False)

        plt.savefig(output.traces, dpi=300)
        plt.close('all')


rule clean:
    shell:
        """
            rm -rf OUTPUT_FILES
        """
